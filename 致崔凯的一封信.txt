崔徽卷轴瑶姬梦
凯歌应是新年唱
真个亲曾见太平
是处移花是处开
牛□西畔有桑麻
逼人上树拔却梯





昨日回顾：

mysql主从配置
一主一从
	主库和从库数据实时同步
	最好是读写分离
		主库写入数据(root)
		从库只能读取数据
			-不能用root去登录
			-可以通过root给这个普通用户授权，grant create,seltct, *******
			-使用普通用户登录
			-在配置文件中添加  read-only=True (只对普通用户生效)，达到一个从库只读效果

mariadb下载太慢的问题：
1.问题来源，那肯定是mariadb.repo这个仓库源的问题
	-为什么要配置这个（因为这是官方提供的mariadb rpm包源，下载一定不会出错，版本一定是最新的）
	-但是问题就是，yum install mariadb-server的时候去国外的源仓库下载，速率可能很慢
	解决办法就是：安装epel源，通过他下载：
	面临的问题是：
		-可能软件包是旧的，没有更新
		
熟练linux下python开发
熟练virtualenv管理python环境，

archlinux '邪教'linux
ubuntu 


2.			
	
今日内容：
nginx 他是一个web服务器
	能提供一个web页面
		socket服务端
		
		
	高性能
	

django  python web框架
	也能提供web页面
		socket服务端
		django的socket服务来自于wsgiref的模块
	wsgiref
		makeserver
	性能差？
		wsgiref这个单机web模块
	
	uwsgi + django 
		此时你的django就支持多进程，多线程，一个高并发的web环境
	python manager.py runserver 0.0.0.0:8000
	
		
web服务访问流程：

1.dns解析流程
	1.你要输入域名  pythonav.cn 
	2.你的机器首先在/etc/hosts文件中查找解析记录
	3.会去本地dns缓存中查找记录，LDNS
	4.就去/etc/resolv.conf去找到指定的公网dns服务器
	5.假设你dns服务器是119.29.29.29	
		通过119.29.29.29找到对应的记录
		pythonav.cn    123.206.16.61
	6.找到记录后，机器会将此记录，缓存到LDNS中，用于下次加速解析
	7.浏览器访问对应的ip ，123.206.16.61，发起http请求

nginx安装配置：
之前装的nginx要不要删
	yum install nginx -y 
	systemctl start nginx 
	他会配置环境变量
	/usr/local/bin/nginx 这个快捷启动命令
	很可能扰乱你编译nginx的使用
	因此
	yum remove nginx -y 

1.解决软件依赖
yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel openssl openssl-devel -y

1.下载源码包
wget -c https://nginx.org/download/nginx-1.12.0.tar.gz

2.解压缩源码
tar -zxvf nginx-1.12.0.tar.gz


切换进入nginx目录
nginx1-12         nginx-1.12.0.tar.gz

cd  nginx1-12  

3.配置，编译安装
./configure --prefix=/opt/nginx1-12/   #这里不会生成文件夹

make && make install    #此步结束，才会正式创建/opt/nginx1-12文件夹

4.启动nginx，进入sbin目录,找到nginx启动命令
cd /opt/nginx1-12  #进入nginx主目录，所有东西都在这了
#进入可执行命令目录
cd sbin  #里面有一个nginx脚本

./nginx #启动  ，检查端口和进程


./nginx -s stop #关闭

./nginx -s reload #重新加载ngix配置文件，不重启nginx ，提前，你的nginx必须得启动

./nginx -t  #检测nginx.conf语法是否正确


	
nginx软件目录结构
conf
	nginx.conf  修改nginx主配置文件
sbin 
	nginx  启动命令
html 
	index.html  存放网页根目录

	
	
nginx博客
https://www.cnblogs.com/pyyu/p/9468680.html/


nginx.conf
	server虚拟主机标签的作用
	
	
	需求：我是一个淘宝卖家，我卖衣服和鞋子
	1.准备两台服务器，两个ip，两个域名
		yifu.com   xxx.xxx.xxx.xxx     :80
		
		xiezi.com  ooo.ooo.ooo.ooo    :80
		
	资源浪费，成本浪费的弊端
	
	2.既然这样，nginx就提供了一个虚拟主机的功能，可以在一个服务器上，运行多个网站
	虚拟主机
		多域名的虚拟主机
			咱们学习这个！！
		
		
		多ip的虚拟主机（机器绑定双网卡）
		多端口的虚拟主机
	
	我在一台nginx机器上，配置好虚拟主机
	#我值需要准备一台服务器即可
	
	
	#虚拟主机1，卖衣服
	server{
		listen       80;
        server_name  s12db.com;
	}
	
	#虚拟主机2，卖鞋子
	server{
		listen       80;
        server_name  s12jd.com;
	}
	
	/etc/hosts 
		s12db.com     10.0.0.10
		s12jd.com       10.0.0.10
		
		
		
	省钱，省资源，并且性能也很高

	
nginx部署一个网站

1.检查nginx主配置文件
	ls /opt/nginx1-12/conf 
	找到nginx.conf 
	编辑配置文件
	vim nginx.conf 
	找到虚拟主机标签端
	server {
			listen       80;
			server_name  localhost;
			location / {
				#网页根目录配置，自定义文件下载到这里来
				root   /opt/static/;
				#定义首页文件
				index  index.html index.htm;
			}
			error_page  404 403 401 402               /404.html;
			error_page   500 502 503 504  /50x.html;
			location = /50x.html {
				root   html;
			}
		}

2.修改完配置文件
wget pythonav.cn/index.html  #下载这个动画首页文件，自己部署一下nginx

3.重启nginx服务

./nginx -s reload  




	
基于域名的虚拟主机实战

1.准备俩域名在，hosts文件中强制解析
找到windows的hosts文件，强制一个域名解析
地址：    C:\Windows\System32\drivers\etc\hosts   （windows8  10的用户，请用管理员运行 ）
写入 域名解析
10.0.0.10    www.mytb.com  
10.0.0.10    www.myjd.com

2.修改nginx.conf配置文件
写入两个server{}  标签，定义两个虚拟主机
    server {
        listen       80;
        server_name  www.mytb.com;
        location / {
            root   /opt/static/mytb/;
            index  index.html index.htm;
        }
        error_page  404 403 401 402               /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
   server  {
     listen  80;
     server_name  www.myjd.com;
     location /  {
      root   /opt/static/myjd/;
      index    index.html;
}
}

3.创建虚拟主机定义的网页根目录
mkdir -p /opt/static/{mytb,myjd}
4.写入两个网站的index.html文件
cd /opt/static/myjd 
	touch index.html 
cd /opt/static/mytb 
	touch index.html 

5.重启nginx服务器
./nginx -s reload   #这是nginx命令的相对路径

/opt/nginx1-12/sbin/nginx   -s reload #这是绝对路径的命令

6.在windows中访问自己的两个虚拟主机


nginx拒绝ip访问：
	如果哪天发现你的nginx很慢，或者检查access.log时候，有一个some body疯狂请求你的nginx server，那么可以禁止这个IP访问
	复制代码
	限制ip或ip段访问
	location / {
	deny 192.168.1.1;
	deny 192.168.1.0/24;
	allow 10.1.1.0/16;  
	}
	
nginx错误页面优化
	Nginx错误页面优化
	在网站运行过程中，可能因为页面不存在等原因，导致网站无法正常响应请求，此时web服务会返回系统的错误码，但是默认的错误页面很不友好。
配置参数：
server {
        listen       80;
        server_name  www.pythonav.cn;
        root html/pythonav;
        location /{
            index  index.html index.htm;
        }
　　　　　#在pythonav路径下的40x.html错误页面
        error_page 400 403 404 405 /40x.html;
        }

		
nginx反向代理功能

1.正向代理的概念
	正向代理，实际应用在，vpn代理ip
	那么用户在家的时候，通过一个代理ip，连接上公司的内网环境
	这个ip就是一个正向代理ip
	
2.反向代理
	1.用户发起请求  pythonav.cn/login/ ，访问到nginx服务器，告诉nginx，我要登录
	2. nginx 作为一个中间代理，他不做处理，他把这请求，直接扔给后面的应用服务器,django 
	3.django接收到login请求，处理请求，返回请求再给nginx
	4.nginx返回处理完毕的页面，数据，返回给用户/浏览器
	5.客户/浏览器得到一个处理完毕的结果

	

端口转发

客户端的入口是 访问到nginx的80端口， 端口转发给 后端的8000django应用 

web服务是 80端口  

django应用 8000端口


nginx + uwsgi + django + supervisor 上线发布django

	
	1.准备好python3环境，以及虚拟环境virtualenvwrapper
	2.创建新的虚拟环境
	mkvirtualenv django15
	3.安装django1.11.15
	pip3 install django==1.11.15
	4.创建django项目，测试访问
	python3 manage.py runserver 0.0.0.0:8000

安装uwsgi
	1.pip3 install -i https://pypi.douban.com/simple uwsgi
	2.通过uwsgi启动一个python web服务
		准备一个test_uwsgi.py文件，写入代码
		def application(env, start_response):
			start_response('200 OK', [('Content-Type','text/html')])
			return [b"Hello World,im uwsgi....."] # python3
	3,通过命令启动这个文件
	uwsgi --http :8000 --wsgi-file test_uwsgi.py
	4.可以测试访问 0.0.0.0:8000 
	
	
通过uwsgi，启动django项目
	1.准备好django项目
	2.编写一个hello测试视图
	from django.shortcuts import HttpResponse
	def hello(request):
		return HttpResponse('hello , im uwsgi.....')
	加上url视图
	urlpatterns = [
		url(r'^admin/', admin.site.urls),
		url(r'^hello/',hello),
]
	3.通过uwsgi启动你的django项目
		1.进入你的django项目，这是第一层
		cd /root/Envs/django15/mysite15
		2.通过命令启动
		uwsgi --http :9000 --module mysite15.wsgi
		3.测试访问你的django应用 9000端口
		4.注意，此时你的项目丢失静态文件，因为uwsgi不解析静态文件配置
		
uwsgi热加载django程序
	1.启动命令添加一条参数
	uwsgi --http :8088 --module mysite.wsgi --py-autoreload=1 
	
	
	



	
	



			

 













			
